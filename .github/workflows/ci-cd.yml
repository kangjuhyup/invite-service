name: CI-CD

on:
  push:
    branches:
      - main 
jobs:
  build:
    runs-on: ubuntu-latest
    environment: CI/CD
    permissions:
      contents: read
      packages: write
    steps:
    - name: checkout
      uses: actions/checkout@v3

    - name: setup docker
      uses: docker/setup-buildx-action@v2

    - name: login contianer registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: setup yarn
      uses: actions/setup-node@v3
      with:
        node-version: 20
        cache: 'yarn'

    - name: install packages
      run: yarn install --immutable
    
    - name : create .env
      run: |
        echo "NODE_ENV=${{ vars.NODE_ENV }}" >> .env
        echo "PORT=${{ vars.PORT }}" >> .env
        echo "WASABI_ACCESS_KEY=${{ secrets.WASABI_ACCESS_KEY }}" >> .env
        echo "WASABI_SECRET_KEY=${{ secrets.WASABI_SECRET_KEY }}" >> .env
        echo "WASABI_REGION=${{ vars.WASABI_REGION }}" >> .env
        echo "WASABI_ENDPOINT=${{ vars.WASABI_ENDPOINT }}" >> .env
        echo "THUMB_BUCKET=${{ vars.THUMB_BUCKET }}" >> .env
        echo "BACKGROUND_BUCKET=${{ vars.BACKGROUND_BUCKET }}" >> .env
        echo "COMPONENT_BUCKET=${{ vars.COMPONENT_BUCKET }}" >> .env
        echo "LETTER_BUCKET=${{ vars.LETTER_BUCKET }}" >> .envㄴ
        echo "DB_TYPE=${{ vars.DB_TYPE }}" >> .env
        echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
        echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
        echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
        echo "DB_PWD=${{ secrets.DB_PWD }}" >> .env
        echo "DB_USER=${{ secrets.DB_USER }}" >> .env
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
        echo "JWT_EXPIRES=${{ vars.JWT_EXPIRES }}" >> .env
        echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> .env
        echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> .env
        echo "REDIS_PWD=${{ secrets.REDIS_PWD }}" >> .env

    - name: Display .env file content
      run: cat .env
    - name: builder push
      run: docker buildx build --platform linux/amd64,linux/arm64 -t ghcr.io/${{ github.repository }}/builder:latest --push .
    - name: builder push
      run: docker buildx build --platform linux/amd64,linux/arm64 -t ghcr.io/${{ github.repository }}/release:latest --push .
    - name: docker build & push
      run: docker buildx build --platform linux/amd64,linux/arm64 -t ghcr.io/${{ github.repository }}/service:latest --push .
  
      
  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: install ssh
      run: |
        sudo apt-get update
        sudo apt-get install -y sshpass

#TODO: pm2 를 이용해 무중단 배포
    - name: deploy
      env:
        ORACLE_IP: ${{ secrets.ORACLE_INSTANCE_IP }}
        SSH_PRIVATE_KEY: ${{ secrets.ORACLE_SSH_PRIVATE_KEY }}
      run: |
        echo "$SSH_PRIVATE_KEY" > private_key
        chmod 600 private_key
        
        ssh -o StrictHostKeyChecking=no -i private_key ubuntu@$ORACLE_IP << 'EOF'
          docker login ghcr.io -u $GITHUB_ACTOR -p $GITHUB_TOKEN
          docker pull ghcr.io/${{ github.repository }}/service:latest
          docker stop invite-api || true
          docker rm invite-api || true
          docker run -d -p 3003:3003 --network my-network --name invite-api ghcr.io/${{ github.repository }}/service:latest
        EOF
